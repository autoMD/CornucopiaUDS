import XCTest
@testable import CornucopiaUDS

final class ISOTPTests: XCTestCase {

    static let decoder = UDS.ISOTP.Decoder()

    func testDecodeSingleShort() {
        let given = [
            UInt8(0x03),
            UInt8(0x15),
            UInt8(0x16),
            UInt8(0x17),
        ]
        guard let decoded = try? Self.decoder.decode(given) else { return XCTFail("ISOTP did not decode valid message") }
        XCTAssertEqual(Array(given.dropFirst()), decoded)
    }

    func testDecodeSingleRegular() {
        let given = [
            UInt8(0x03),
            UInt8(0x15),
            UInt8(0x16),
            UInt8(0x17),
        ]
        guard let decoded = try? Self.decoder.decode(given) else { return XCTFail("ISOTP did not decode valid message") }
        XCTAssertEqual(Array(given.dropFirst()), decoded)
    }

    func testDecodeMultipleRegular() {
        let given = [
            UInt8(0x10),
            UInt8(0x14),
            UInt8(0x49),
            UInt8(0x02),
            UInt8(0x01),
            UInt8(0x57),
            UInt8(0x44),
            UInt8(0x58),

            UInt8(0x21),
            UInt8(0x2D),
            UInt8(0x53),
            UInt8(0x49),
            UInt8(0x4D),
            UInt8(0x30),
            UInt8(0x30),
            UInt8(0x31),

            UInt8(0x22),
            UInt8(0x35),
            UInt8(0x35),
            UInt8(0x35),
            UInt8(0x35),
            UInt8(0x35),
            UInt8(0x35),
            UInt8(0x35),
        ]
        guard let decoded = try? Self.decoder.decode(given) else { return XCTFail("ISOTP did not decode valid message") }
        XCTAssertEqual(decoded.count, 0x14)
    }

    func testDecodeMultipleRegularLastShort() {

        let given: [UInt8] = [
            0x10,0x07,0x62,0x01,0x05,0x95,0x28,0x00,
            0x21,0x00]
        guard let decoded = try? Self.decoder.decode(given) else { return XCTFail("ISOTP did not decode valid message") }
        XCTAssertEqual(decoded, [0x62, 0x01, 0x05, 0x95, 0x28, 0x00, 0x00])
    }

    func testDecodeMultipleIncompletePayload() {

        let given: [UInt8] = [
            0x1F,0xA5,0x62,0x01,0x05,0x95,0x28,0x00,
            0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x23,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x25,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x26,0x00,0x00,0x00,0x00,0x95,0x1E,0x00,
            0x27,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x29,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x2B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x2C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x2D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x2F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x21,0x00,0x00,0x00,0x00,0x00,0x95,0x50,
            0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x23,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x25,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x27,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x29,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x2B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x2C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x2D,0x00,0x00,0x00,0x95,0x28,0x00,0x00,
            0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x2F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        ]
        XCTAssertThrowsError(try Self.decoder.decode(given))
    }

    static var allTests = [
        ("testDecodeSingleShort", testDecodeSingleShort),
        ("testDecodeSingleRegular", testDecodeSingleRegular),
        ("testDecodeMultipleRegular", testDecodeMultipleRegular),
        ("testDecodeMultipleRegularLastShort", testDecodeMultipleRegularLastShort),
        ("testDecodeMultipleIncompletePayload", testDecodeMultipleIncompletePayload),

    ]
}

